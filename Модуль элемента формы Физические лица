
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Дата = ТекущаяДатаСеанса();
	
	ФизЛицаФормы.ФизическиеЛицаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	Если СозданиеНового Тогда
		ГражданствоПоУмолчанию();
		
		ДокументыФизическихЛиц.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.Паспорт;
		ДокументыФизическихЛиц.ДатаВыдачи = Дата;
		ДокументыФизическихЛиц.СрокДействия = Дата;
		ДокументыФизическихЛиц.Период = Дата;
	Иначе	
	КонецЕсли;
	
	ПроверитьИНН();
	
	// Установить видимость и доступность элементов формы
	УстановитьВидимостьДоступностьЭлементов();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация");	
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация	
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	
	ПараметрыПоля = РаботаСФайлами.ПолеФайла();
	ПараметрыПоля.Размещение  = "ГруппаФото";
	ПараметрыПоля.ПутьКДанным = "Объект.ФайлФото";
	ПараметрыПоля.ПутьКДаннымИзображения = "АдресФото";
	ПараметрыПоля.ПоказыватьКоманднуюПанель = Ложь;
	ПараметрыПоля.ТекстНеВыбраннойКартинки = "Добавить фото" + Символы.ПС + "физического лица";
	
	ДобавляемыеЭлементы = Новый Массив;
	ДобавляемыеЭлементы.Добавить(ПараметрыГиперссылки);
	ДобавляемыеЭлементы.Добавить(ПараметрыПоля);
                      
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ДобавляемыеЭлементы);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ФизЛицаКлиент.ФизическиеЛицаОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ФизЛицаФормы.ФизическиеЛицаПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);	
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Гражданство.
	Если ЗначениеЗаполнено(ГражданствоФизическихЛиц.Страна)
		И НЕ ЗначениеЗаполнено(ГражданствоФизическихЛиц.Период) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Период (Гражданство)'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ГражданствоФизическихЛиц.Период",, Отказ);
	КонецЕсли;	
	
	// Документ, удостоверяющий личность.
	Если ЗначениеЗаполнено(ДокументыФизическихЛиц.ВидДокумента)
		И НЕ ЗначениеЗаполнено(ДокументыФизическихЛиц.Период) Тогда 
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Период (Документы)'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ДокументыФизическихЛиц.Период",, Отказ);
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Ссылка = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда 
		Ссылка = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор);
	Иначе
		Ссылка = Объект.Ссылка;
	КонецЕсли;
	
	Справочники.ФизическиеЛица.ПроверитьДублиИНН(Объект.ИНН, Ссылка);
	
	Если Не ЗначениеЗаполнено(Объект.ФИО) Тогда 
		Объект.ФИО = Объект.Наименование;
	КонецЕсли;
	
	ФизЛицаФормы.ФизическиеЛицаПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
    УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
    // Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ФизЛицаФормы.ФизическиеЛицаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьНаКлиенте", ЭтотОбъект);
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	КонецЕсли;   
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Не ПараметрыЗаписи.Свойство("ПроверкаПередЗаписьюВыполнена") Тогда 
		Отказ = Истина;
		ЗаписатьНаКлиенте(Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ФизЛицаФормы.ФизическиеЛицаПриЗаписиНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ФизЛицаКлиент.ФизическиеЛицаПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

//////////////////////////////////////////////////////////////////////////////////
// Редактирование данных ФизическогоЛица

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	ПроверитьИНН();
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ФизЛицоДатаРождения.
//
&НаКлиенте
Процедура ФизЛицоДатаРожденияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаРождения) Тогда 
		ГодМолодости = Год(Дата) - 15;
		ГодСтарости  = Год(Дата) - 150;
		
		Если Год(Объект.ДатаРождения) > ГодМолодости 
			Или Год(Объект.ДатаРождения) < ГодСтарости Тогда
			ТекстСообщения = НСтр("ru = 'Дата рождения выходит за границы допустимого диапазона.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ФизическоеЛицоСсылка, "ДатаРождения", "ФизЛицо");
			Объект.ДатаРождения = '00010101000000';	
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьИНН();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоМестоРожденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ФизЛицаКлиент.ФизическиеЛицаМестоРожденияНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, Объект.МестоРождения);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ГражданствоФизическихЛицСтрана.
//
&НаКлиенте
Процедура ГражданствоФизическихЛицСтранаПриИзменении(Элемент)
	Если ГражданствоФизическихЛиц.Период = '00010101' Тогда
		ГражданствоФизическихЛиц.Период = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса())
	КонецЕсли;
	
	ПроверитьИНН();
КонецПроцедуры

&НаСервере
Процедура ГражданствоПоУмолчанию()
	ГражданствоФизическихЛиц.Страна = Справочники.СтраныМира.Киргизия;
	ГражданствоФизическихЛиц.Период = Дата; 
КонецПроцедуры


// Процедура - обработчик события ПриИзменении поля ввода ДокументыФизическихЛицДатаВыдачи.
//
&НаКлиенте
Процедура ДокументыФизическихЛицДатаВыдачиПриИзменении(Элемент)
	ФизЛицаКлиент.ДокументыФизическихЛицВидДокументаПриИзменении(ЭтаФорма);
	
	ДатаВыдачи = ДокументыФизическихЛиц.ДатаВыдачи;
	Если ЗначениеЗаполнено(ДатаВыдачи) Тогда 	                                                   
		Если Год(ДатаВыдачи) < Год(Дата) - 100 Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю("Некорректная дата выдачи удостоверения", ФизическоеЛицоСсылка,"ДатаВыдачи","ДокументыФизическихЛиц");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДокументыФизическихЛиц.Период = ДатаВыдачи;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ДокументыФизическихЛицСрокДействия.
//
&НаКлиенте
Процедура ДокументыФизическихЛицСрокДействияПриИзменении(Элемент)
	СрокДействия = ДокументыФизическихЛиц.СрокДействия;
	Если ЗначениеЗаполнено(СрокДействия) Тогда 	                                                   
		Если Год(СрокДействия) > Год(Дата) + 10 ИЛИ  Год(СрокДействия) < Год(Дата) - 100 Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю("Некорректный срок действия удостоверения",ФизическоеЛицоСсылка,"СрокДействия","ДокументыФизическихЛиц");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	
	РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
				ПараметрыПеретаскивания, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФизическиеЛица
// Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ГражданствоФизическихЛицИстория(Команда)
	ФизЛицаКлиент.ОткрытьФормуРедактированияИстории("ГражданствоФизическихЛиц", ФизическоеЛицоСсылка, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицИстория(Команда)
	ФизЛицаКлиент.ОткрытьФормуРедактированияИстории("ДокументыФизическихЛиц", ФизическоеЛицоСсылка, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВсеДокументыЭтогоЧеловека(Команда)
	
	ФизЛицаКлиент.ОткрытьСписокВсехДокументовФизическогоЛица(ЭтаФорма, ФизическоеЛицоСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	ЗаписатьНаКлиенте(Истина);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)	
	ЗаписатьНаКлиенте(Ложь);      	
КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении(Элемент)
	ФизЛицаКлиент.ПриИзмененииФИОФизическогоЛица(ЭтаФорма);
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)

	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);

КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте(Результат, ДополнительныеПараметры) Экспорт 
	ЗаписатьНаКлиенте(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПроверитьДублиФизЛиц(ЭтаФорма);
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтаФорма, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает видимость и доступность элементов.
//
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	МожноРедактироватьФизическиеЛица = ПравоДоступа("Редактирование", Метаданные.Справочники.ФизическиеЛица);
	Элементы.КомандаЗаписатьИЗакрыть.Доступность = МожноРедактироватьФизическиеЛица;
	Элементы.КомандаЗаписать.Доступность = МожноРедактироватьФизическиеЛица;

КонецПроцедуры // УстановитьВидимостьДоступностьЭлементов()

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
    УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаКлиенте(ЗакрытьПослеЗаписи, ОповещениеЗавершения = Неопределено) Экспорт 	
	ПараметрыЗаписи = Новый Структура;
	ФизЛицаКлиент.ФизическиеЛицаПередЗаписью(ЭтаФорма, Ложь, ПараметрыЗаписи, ОповещениеЗавершения, ЗакрытьПослеЗаписи);	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИНН(Отказ = Ложь)
	
	СтруктураДляПроверкиИНН = Новый Структура(); 
	СтруктураДляПроверкиИНН.Вставить("ПроверитьИНН", ГражданствоФизическихЛиц.Страна = Справочники.СтраныМира.Киргизия);	
	СтруктураДляПроверкиИНН.Вставить("ИНН", Объект.ИНН);
	СтруктураДляПроверкиИНН.Вставить("ЕстьДубли", Ложь);
	СтруктураДляПроверкиИНН.Вставить("Ссылка", ФизическоеЛицоСсылка);
	СтруктураДляПроверкиИНН.Вставить("ДатаРождения", Объект.ДатаРождения);
	СтруктураДляПроверкиИНН.Вставить("ЭтоЮрЛицо", Ложь);
	СтруктураВозврата = КлиентСервер_УМП.ПроверитьКорректностьИНН(СтруктураДляПроверкиИНН);
	
	ПроверитьДублиФизЛиц(ЭтаФорма);	
	
	НадписьПоясненияНекорректногоИНН = СтруктураВозврата.НадписьПоясненияНекорректногоИНН;
	Элементы.НадписьПоясненияНекорректногоИНН.Видимость = Не СтруктураВозврата.ИННВВеденКорректно;
	
	ИННУказанНеВерно = Не СтруктураВозврата.ИННВВеденКорректно И НЕ СтруктураВозврата.ПустойИНН;
	
КонецПроцедуры

// Процедура управляет информационными надписями о наличии дублей.
// 
&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьДублиФизЛиц(Форма)
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	КоличествоЭлементовДублей = 0;
	
	КоличествоЭлементовДублей = ПолучитьКоличествоДублейСервер(Объект.ИНН, Объект.Ссылка);
	
	Если КоличествоЭлементовДублей > 0 Тогда
		
		СтруктураПараметровСообщенияОДублях = Новый Структура;
		
		Если КоличествоЭлементовДублей = 1 Тогда
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", НСтр("ru = 'одно'"));
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеФизЛиц", НСтр("ru = 'ФизЛицо'"));
		ИначеЕсли КоличествоЭлементовДублей < 5 Тогда
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеФизЛиц", НСтр("ru = 'ФизЛица'"));
		Иначе
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеФизЛиц", НСтр("ru = 'ФизЛиц'"));
		КонецЕсли;	
		
		СтруктураПараметровСообщенияОДублях.Вставить("ИНН", НСтр("ru = 'ИНН'"));
		
		ТекстНадписиОДублях = НСтр("ru = 'С таким [ИНН] есть [КоличествоЭлементовДублей] [СклонениеФизЛиц]'");
		
		Элементы.ПоказатьДубли.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстНадписиОДублях, СтруктураПараметровСообщенияОДублях);
		
		Если Не Форма.СтруктураДляПроверкиИНН = Неопределено Тогда 																										   
			Форма.СтруктураДляПроверкиИНН.ЕстьДубли = Истина;
			Элементы.ПоказатьДубли.Видимость = Истина;
		КонецЕсли;
		
		Форма.ЕстьДублиИНН = Истина;
		
	Иначе
		Если Не Форма.СтруктураДляПроверкиИНН = Неопределено Тогда 																										   
			Форма.СтруктураДляПроверкиИНН.ЕстьДубли = Ложь;
		КонецЕсли;
		
		Форма.ЕстьДублиИНН = Ложь;
		Элементы.ПоказатьДубли.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоДублейСервер(Знач ИНН, Знач Ссылка)
	Если Ссылка = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда 
		Ссылка = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор);
	КонецЕсли;

	Возврат Справочники.ФизическиеЛица.ПроверитьДублиИНН(СокрЛП(ИНН), Ссылка).Количество();
КонецФункции	

#КонецОбласти
